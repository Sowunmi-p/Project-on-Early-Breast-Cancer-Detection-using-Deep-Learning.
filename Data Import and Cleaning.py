# -*- coding: utf-8 -*-
"""Final_MSC_Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kQlWJi3Rfn_TfNxFGYfh-Vf0IUnSrXgt
"""

# Core TensorFlow library for machine learning and neural network models.
import tensorflow as tf

# VGG16 model from Keras applications for deep learning models pre-trained on ImageNet dataset.
from tensorflow.keras.applications import VGG16

# Utilities for preprocessing images and decoding predictions.
from tensorflow.keras.preprocessing import image
from tensorflow.keras.applications.vgg16 import preprocess_input, decode_predictions

# OS module for operating system interactions, such as file path management.
import os

# PIL (Python Imaging Library) for image processing tasks.
import PIL

# Importing components from Keras for building and training models.
from tensorflow.keras import datasets, layers, models

# Utility to visualize the architecture of neural networks.
from keras.utils import plot_model

# Matplotlib for plotting, e.g., displaying images and graphs.
import matplotlib.pyplot as plt

# NumPy for numerical computing and handling large, multi-dimensional arrays and matrices.
import numpy as np

# Random for generating random numbers and reproducibility.
import random

# Pandas for data manipulation and analysis.
import pandas as pd

# OS module for interacting with the operating system.
import os

# Specific import from OS module for listing directory contents.
from os import listdir

# Plotly Express for interactive and easy-to-use plotting.
import plotly.express as px

# Seaborn for statistical data visualization based on matplotlib.
import seaborn as sns

# OpenCV for computer vision tasks.
import cv2

# Function to read images using matplotlib.
from matplotlib.image import imread

# Utility for converting labels to one-hot encoded format.
from tensorflow.keras.utils import to_categorical

# Utility for loading and preprocessing images.
from tensorflow.keras.preprocessing import image

# Scikit-learn module for splitting data into training and testing sets.
from sklearn.model_selection import train_test_split

# Scikit-learn module for computing confusion matrix.
from sklearn.metrics import confusion_matrix

# Glob for finding pathnames matching a specified pattern.
import glob

# PIL (Python Imaging Library) for image processing tasks (repeated import).
import PIL

# Setting the seed for random number generation to ensure reproducibility.
random.seed(100)
```

# Import the drive module from the google.colab package.
# This module is specifically designed for Google Colab notebooks to interact with Google Drive.
from google.colab import drive

# Mounts the Google Drive to the specified mount point in the Colab environment.
# This allows you to access your Google Drive files directly from the notebook.
# '/content/drive' is the common mount point, providing a path to access the drive contents.
drive.mount('/content/drive')

# After executing this, you'll be prompted to authorize access to your Google Drive.
# You'll need to click on the provided link, sign in to your Google account if not already signed in,
# and copy the authorization code back into this notebook to complete the mounting process.
# Once mounted, you can access your Google Drive files under '/content/drive/My Drive/'.

# loading dicom info file
df_dicom_info = pd.read_csv('/content/drive/MyDrive/csv/dicom_info.csv')
df_dicom_info.head()

#loading the meta info
df_meta_info = pd.read_csv('/content/drive/MyDrive/csv/meta.csv')
df_meta_info.head()

#image path for image types
image_dir = '/content/drive/MyDrive/jpeg'

# check the types of image in the dataset
df_dicom_info.SeriesDescription.unique()

"""##Cropped image"""

# check image path in dataset
# cropped images
cropped_images = df_dicom_info[df_dicom_info.SeriesDescription=='cropped images'].image_path
#cropped_images.head(5)

# changing the directory path of images
cropped_images = cropped_images.replace('CBIS-DDSM/jpeg', image_dir, regex=True)


# view new paths
print('Cropped Images paths:\n')
print(cropped_images.iloc[0])

for file  in cropped_images[0:5]:
  cropped_images_show = PIL.Image.open(file)
# Convert the image to grayscale
  gray_img= cropped_images_show.convert("L")
  plt.imshow(gray_img, cmap='gray')

"""##Full mammogram image"""

#full mammogram images
full_mammogram = df_dicom_info[df_dicom_info.SeriesDescription=='full mammogram images'].image_path
#full_mammogram.head(5)

#view path
full_mammogram = full_mammogram.replace('CBIS-DDSM/jpeg', image_dir, regex=True)
print('Full mammo Images paths:\n')
print(full_mammogram.iloc[0])

for file  in full_mammogram[0:5]:
  full_mammogram_images_show = PIL.Image.open(file)
# Convert the image to grayscale
  gray_img= full_mammogram_images_show.convert("L")
  plt.imshow(gray_img, cmap='gray')

"""##Region Of Interest Image (ROI image)"""

# ROI images
roi_image = df_dicom_info[df_dicom_info.SeriesDescription=='ROI mask images'].image_path
roi_image.head(5)

#view path
roi_image = roi_image.replace('CBIS-DDSM/jpeg', image_dir, regex=True)
print('ROI Mask Images paths:\n')
print(roi_image.iloc[0])

for file  in roi_image[0:5]:
  roi_image_images_show = PIL.Image.open(file)
# Convert the image to grayscale
  gray_img= roi_image_images_show.convert("L")
  plt.imshow(gray_img, cmap='gray')

# organize image paths
full_mammogram_dict = dict()
cropped_images_dict = dict()
roi_image_dict = dict()

for dicom in full_mammogram:
    key = dicom.split("/")[5]
    full_mammogram_dict[key] = dicom
for dicom in cropped_images:
    key = dicom.split("/")[5]
    cropped_images_dict[key] = dicom
for dicom in roi_image:
    key = dicom.split("/")[5]
    roi_image[key] = dicom

# view keys
next(iter((full_mammogram_dict.items())))

# load the mass dataset
df_mass_train = pd.read_csv('/content/drive/MyDrive/csv/mass_case_description_train_set.csv')
df_mass_test = pd.read_csv('/content/drive/MyDrive/csv/mass_case_description_test_set.csv')

df_mass_train.head()

# fix image paths
def fix_image_path(data):
    """correct dicom paths to correct image paths"""
    for index, img in enumerate(data.values):
        img_name = img[11].split("/")[2]
        data.iloc[index,11] = full_mammogram_dict[img_name]
        img_name = img[12].split("/")[2]
        data.iloc[index,12] = cropped_images_dict[img_name]

# apply to datasets
fix_image_path(df_mass_train)
fix_image_path(df_mass_test)

# check unique values in pathology column
df_mass_train.pathology.unique()

df_mass_train.info()

"""#Cleaning Data"""

# renaming of the columns for easy access
df_mass_train = df_mass_train.rename(columns={'left or right breast': 'left_or_right_breast',
                                           'image view': 'image_view',
                                           'abnormality id': 'abnormality_id',
                                           'abnormality type': 'abnormality_type',
                                           'mass shape': 'mass_shape',
                                           'mass margins': 'mass_margins',
                                           'image file path': 'image_file_path',
                                           'cropped image file path': 'cropped_image_file_path',
                                           'ROI mask file path': 'ROI_mask_file_path'})

df_mass_train.head(5)

# check for null values
df_mass_train.isnull().sum()

# fill in missing values using the backwards fill method
df_mass_train['mass_shape'] = df_mass_train['mass_shape'].fillna(method='bfill')
df_mass_train['mass_margins'] = df_mass_train['mass_margins'].fillna(method='bfill')

#check null values
df_mass_train.isnull().sum()

# quantitative summary of features
df_mass_train.describe()

# view mass_test
df_mass_test.head()

# check datasets shape
print(f'Shape of mass_train: {df_mass_train.shape}')
print(f'Shape of mass_test: {df_mass_test.shape}')

#Rechecking the null values
df_mass_test.isnull().sum()

# check for column names in mass_test
print(df_mass_test.columns)
print('\n')
# rename columns
df_mass_test = df_mass_test.rename(columns={'left or right breast': 'left_or_right_breast',
                                           'image view': 'image_view',
                                           'abnormality id': 'abnormality_id',
                                           'abnormality type': 'abnormality_type',
                                           'mass shape': 'mass_shape',
                                           'mass margins': 'mass_margins',
                                           'image file path': 'image_file_path',
                                           'cropped image file path': 'cropped_image_file_path',
                                           'ROI mask file path': 'ROI_mask_file_path'})

# view renamed columns
df_mass_test.columns

# fill in missing values using the backwards fill method
df_mass_test['mass_margins'] = df_mass_test['mass_margins'].fillna(method='bfill')

#check null values
df_mass_test.isnull().sum()

df_dicom_info.isnull().sum()

df_dicom_info.drop(['PatientBirthDate','AccessionNumber','Columns','ContentDate','ContentTime',
                         'PatientSex','PatientBirthDate','ReferringPhysicianName','Rows','SOPClassUID','SOPInstanceUID',
                         'StudyDate','StudyID','StudyInstanceUID','StudyTime','InstanceNumber','SeriesInstanceUID','SeriesNumber'
                        ],axis =1, inplace=True)

# Create a DataFrame with counts of unique values in 'SeriesDescription' column
r= pd.DataFrame(df_dicom_info['SeriesDescription'].value_counts())
# Reset the index to have 'SeriesDescription' as a column
r= r.reset_index()
# Rename columns for clarity
r= r.rename(columns={'SeriesDescription':'SeriesDescription_counts', 'index':'SeriesDescription'})
# Display the DataFrame
r

# Display some images
import matplotlib.image as mpimg

# create function to display images
def display_images(column, number):
    """displays images in dataset"""
    # create figure and axes
    number_to_visualize = number
    rows = 1
    cols = number_to_visualize
    fig, axes = plt.subplots(rows, cols, figsize=(15, 5))

    # Loop through rows and display images
    for index, row in df_mass_train.head(number_to_visualize).iterrows():
        image_path = row[column]
        image = mpimg.imread(image_path)
        ax = axes[index]
        ax.imshow(image, cmap='gray')
        ax.set_title(f"{row['pathology']}")
        ax.axis('off')
    plt.tight_layout()
    plt.show()

print('Full Mammograms:\n')
display_images('image_file_path', 5)
print('Cropped Mammograms:\n')
display_images('cropped_image_file_path', 5)

